#version 450

#define M_PI 3.1415926535897932384626433832795

layout(local_size_x = 16, local_size_y = 16) in;

const float g = 9.81;

// Box-Muller-Method
vec4 gaussRND() {
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	float noise00 = clamp(imageLoad(noise_r0, uv).r, 0.001, 1.0);
	float noise01 = clamp(imageLoad(noise_i0, uv).r, 0.001, 1.0);
	float noise02 = clamp(imageLoad(noise_r1, uv).r, 0.001, 1.0);
	float noise03 = clamp(imageLoad(noise_i1, uv).r, 0.001, 1.0);

	float u0 = 2.0*M_PI*noise00;
	float v0 = sqrt(-2.0 * log(noise01));
	float u1 = 2.0*M_PI*noise02;
	float v1 = sqrt(-2.0 * log(noise03));

	return vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));
}

void main() {
	vec2 x = vec2(gl_GlobalInvocationID.xy) - float(constants.N)/2.0;
	
	vec2 k = vec2(2.0 * M_PI * x.x/constants.L, 2.0 * M_PI * x.y/constants.L);

	float L_ = (constants.windspeed * constants.windspeed)/g;
	float mag = length(k);
	if (mag < 0.00001) mag = 0.00001;
	float magSq = mag * mag;

	// sqrt(Ph(k))/sqrt(2)
	float h0k = clamp(sqrt((constants.amplitude/(magSq*magSq)) * pow(dot(normalize(k), normalize(constants.w)), 4.0) * 
				exp(-(1 / (magSq * L_ * L_))) * exp(-magSq*pow(constants.capillarSupressFactor, 2)))/ sqrt(2), -4000, 4000);

	// sqrt(Ph(-k))/sqrt(2)
	float h0minusk = clamp(sqrt((constants.amplitude/(magSq*magSq)) * pow(dot(normalize(-k), normalize(constants.w)), 4.0) * 
					 exp(-(1 / (magSq * L_ * L_))) * exp(-magSq*pow(constants.capillarSupressFactor, 2)))/ sqrt(2), -4000, 4000);

	vec4 gauss_random = gaussRND();

	imageStore(tilde_h0k, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.xy * h0k, 0, 1));

	imageStore(tilde_h0minusk, ivec2(gl_GlobalInvocationID.xy), vec4(gauss_random.zw * h0minusk, 0, 1));
}
